{"version":3,"sources":["Containers/TextRate.jsx","Containers/Questions.jsx","Containers/Surveys.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TextRate","confidence","this","props","conf","parseInt","Alert","color","Component","Modal","setAppElement","Questions","onScroll","event","console","log","element","target","scrollHeight","scrollTop","clientHeight","onRating","value","state","qCount","numDocs","ratingsValues","docArray","onRatingComplete","trapValues","setState","DocsFile","docs","instrRead","qualCheck","window","scrollTo","Button","onClick","toolOn","ButtonGroup","e","blur","dangerouslySetInnerHTML","__html","text","className","qualityCheck","displayInstructions","ref","mainRef","runTask","isOpen","contentLabel","shouldCloseOnOverlayClick","Surveys","tlxSubmit","preventDefault","tlxValues","mental_demand","physical_demand","temporal_demand","performance","effort","frustration","onTLXSubmit","elabSubmit","elabValues","e_q1","e_q2","e_q3","e_q4","e_q5","e_q6","e_q7","e_q8","e_q9","e_q10","onElabSubmit","Container","Form","onSubmit","Row","Col","Table","striped","style","width","Input","type","name","defaultValue","min","max","id","Label","tlxComplete","elabComplete","elabSurvey","tlxScales","runSurveys","spreadsheet","GoogleSpreadsheet","process","App","appendSpreadsheet","sheet0row","resultsrow","tlxrow","elabrow","a","useServiceAccountAuth","client_email","private_key","loadInfo","sheet0","sheetsById","sheetResults","sheetTlx","sheetElab","addRow","error","questionsComplete","tlxResults","elabResults","uID","workerID","completeCode","consentSigned","surveysComplete","finishExperiment","bind","search","location","foo","URLSearchParams","get","runExperiment","Math","floor","random","code","Worker_ID","u_ID","consent_signed","generated_code","resultsRow","condition","tlxRow","elabRow","onRequestClose","signConsent","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e34c61af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Alert } from 'reactstrap';\n\nclass TextRate extends Component {\n\n  render() {\n    const { confidence } = this.props; \n\n    let conf = parseInt(confidence * 100)\n    if (conf > 50) {\n      return (\n        <Alert color=\"primary\">\n          The machine rated this answer: <b>Relevant</b>\n          <br></br>\n          With <b>{conf}</b>% confidence\n        </Alert>\n      );\n    } else {\n      return (\n        <Alert color=\"warning\">\n          The machine rated this answer: <b>Not relevant</b>\n          <br></br>\n          With <b>{100-conf}</b>% confidence\n        </Alert>\n      );\n    }\n  }\n}\n\nexport default TextRate;\n","import React, { Component } from 'react';\nimport { Button, ButtonGroup } from 'reactstrap';\nimport Modal from 'react-modal';\nimport './containers.css';\nimport TextRate from './TextRate';\nimport DocsFile from '../docs.json';\n\nModal.setAppElement('#root');\n\nclass Questions extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      docArray: DocsFile.docs,\n      numDocs: DocsFile.numDocs,\n      instrRead: false,\n      qualCheck: false,\n      ratingsValues: {},\n      trapValues: 0, //if trapValues gets to 3, kick user\n      qCount: 0\n    };\n  }\n\n  componentDidUpdate() {\n    window.scrollTo(0, 0)\n  }\n\n  onScroll = (event) => {\n    console.log(\"called\");\n    var element = event.target;\n    if (element.scrollHeight - element.scrollTop === element.clientHeight)\n    {\n        console.log('scrolled');\n    }\n  }\n\n  displayInstructions() {\n    return(\n      <div>\n        <p>\n          For this study, we are collecting data on the worker's experience of labeling data. Read each answer carefully before picking a label.\n        </p>\n        <p>\n          After labeling, you will be asked to fill out two short surveys about your experience. You must complete all portions of the study to recieve compensation for the HIT.\n        </p>\n        <Button onClick={() => this.setState({instrRead:true})}>Accept</Button>\n      </div>\n    );\n  }\n\n  qualityCheck() {\n    const { toolOn } = this.props;\n\n    return(\n      <div>\n        <p>We are testing how the codebook provided affects your labeling experience. Read the guides for each label and use them when making rating decisions. Use the codebook instructions under the relevant tab to decide how to rate this answer to the question: </p>\n        <h4>What is the most comfortable way to sleep on a plane?</h4>\n        { toolOn &&\n          <TextRate confidence={0.89167821}></TextRate>\n        }\n        <p>The best way to improve sleep when on a plane is having head/neck support. Headrests on the seat sometimes fold inwards to support the head, or bring a neck pillow.</p>\n        <ButtonGroup>\n          <Button\n            value=\"10\"\n            onClick={e => {this.setState({qualCheck:true});\n                           e.target.blur();}}\n          >\n            Relevant\n          </Button>\n          <Button\n            value=\"5\"\n            onClick={e => {this.setState({qualCheck:true, trapValues: 1});\n                           e.target.blur();}}\n          >\n            Slightly Relevant\n          </Button>\n          <Button\n            value=\"0\"\n            onClick={e => {this.setState({qualCheck:true, trapValues: 1});\n                           e.target.blur();}}\n          >\n            Not Relevant\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n\n  onRating = value => {\n    console.log(value);\n    const { qCount, numDocs, ratingsValues, docArray } = this.state;\n    const { onRatingComplete } = this.props;\n\n    let trapValues = this.state.trapValues;\n\n    //trap question\n    if (docArray[qCount].value !== \"\") {\n      if (docArray[qCount].value !== value) {\n        trapValues += 1;\n      }\n    }\n\n    ratingsValues['doc'+(qCount+1)] = value;\n\n    this.setState({\n      ratingsValues: ratingsValues,\n      qCount: qCount + 1,\n      trapValues: trapValues,\n    });\n\n    if (this.state.qCount + 1 === numDocs) {\n      onRatingComplete(ratingsValues);\n    }\n  }\n\n  runTask() {\n    const { instrRead, qualCheck, docArray, numDocs, qCount } = this.state;\n    const { toolOn } = this.props;\n\n    //Instructions\n    if (!instrRead) {\n      return this.displayInstructions();\n    }\n\n    //Codebook reading test\n    if (toolOn === true && !qualCheck) {\n      return this.qualityCheck();\n    }\n\n    //questions\n    if (qCount < numDocs) {\n      return(\n        <div>\n          <h4>What is the most comfortable way to sleep on a plane?</h4>\n          <h6>Instructions: Rate the relevance of the answer below:</h6>\n          { toolOn &&\n            <TextRate confidence={docArray[qCount].confidence}></TextRate>\n          }\n          <div\n            dangerouslySetInnerHTML={ { __html: docArray[qCount].text } }\n            className=\"text-ctn\"\n            onScroll={this.onScroll}\n          >\n          </div>\n          <ButtonGroup>\n            <Button\n              value=\"10\"\n              onClick={e => {this.onRating(10);\n                             e.target.blur();}}\n            >\n              Relevant\n            </Button>\n            <Button\n              value=\"5\"\n              onClick={e => {this.onRating(5);\n                             e.target.blur();}}\n            >\n              Slightly Relevant\n            </Button>\n            <Button\n              value=\"0\"\n              onClick={e => {this.onRating(0);\n                             e.target.blur();}}\n            >\n              Not Relevant\n            </Button>\n          </ButtonGroup>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <p>Questions Complete</p>\n        </div>\n      );\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"q-container\" ref={this.mainRef}>\n        { this.runTask() }\n        <Modal\n          isOpen={this.state.trapValues === 3}\n          contentLabel=\"QualCheckFailed\"\n          shouldCloseOnOverlayClick={false}\n        >\n          <div>\n          <p>Thank you for participating! However, you did not pass our quality checks and you cannot continue.</p>\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default Questions;\n","import React, { Component } from 'react';\nimport { Button, Form, Input, Label, Table, Container, Row, Col } from 'reactstrap';\nimport './containers.css';\n\nclass Surveys extends Component {\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  tlxSubmit = (e) => {\n    e.preventDefault();\n\n    const tlxValues = {\n      'mental-demand': e.target.mental_demand.value,\n      'physical-demand': e.target.physical_demand.value,\n      'temporal-demand': e.target.temporal_demand.value,\n      'performance': e.target.performance.value,\n      'effort': e.target.effort.value,\n      'frustration': e.target.frustration.value\n    }\n\n    this.props.onTLXSubmit(tlxValues);\n  }\n\n  elabSubmit = (e) => {\n    e.preventDefault();\n\n    const elabValues = {\n      'elab1': e.target.e_q1.value,\n      'elab2': e.target.e_q2.value,\n      'elab3': e.target.e_q3.value,\n      'elab4': e.target.e_q4.value,\n      'elab5': e.target.e_q5.value,\n      'elab6': e.target.e_q6.value,\n      'elab7': e.target.e_q7.value,\n      'elab8': e.target.e_q8.value,\n      'elab9': e.target.e_q9.value,\n      'elab10': e.target.e_q10.value\n    }\n\n    this.props.onElabSubmit(elabValues);\n  }\n\n  tlxScales() {\n    return(\n      <Container className=\"tlx-div\"><Form onSubmit={this.tlxSubmit}>\n        <Row>\n          <Col>\n            <h4>Instructions:</h4>\n            <p>Evaluate your experience during the relevancy rating task you just completed by clicking at the point that matches your experience for each scale. Consider each scale indivdually. Please read the descriptions below carefully before rating.</p>\n            <Table striped>\n              <thead>\n                <tr>\n                  <th style={{width: 10+'%'}}>Title</th>\n                  <th style={{width: 30+'%'}}>Description</th>\n                  <th>Scale</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>Mental Demand</td>\n                  <td>How much mental and perceptual activity was required (e.g. thinking, deciding, calculating, remembering, looking, searching, etc.)? Was the task easy or demanding, simple or complex, exacting or forgiving?</td>\n                  <td>\n                    <div className=\"tlx-scale\">\n                    Low\n                    <Input type=\"range\" name=\"mental_demand\" defaultValue=\"11\" min=\"1\" max=\"21\" />\n                    High\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Physical Demand</td>\n                  <td>How much physical activity was required (e.g. pushing, pulling, turning, controlling, activating, etc.)? Was the task easy or demanding, slow or brisk, slack or strenuous, restful or laborious?</td>\n                  <td>\n                    <div className=\"tlx-scale\">\n                    Low\n                    <Input type=\"range\" name=\"physical_demand\" defaultValue=\"11\" min=\"1\" max=\"21\" />\n                    High\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Temporal Demand</td>\n                  <td>How much time pressure did you feel due to the rate or pace at which the tasks or task elements occurred? Was the pace slow and leisurely or rapid and frantic?</td>\n                  <td>\n                    <div className=\"tlx-scale\">\n                    Low\n                    <Input type=\"range\" name=\"temporal_demand\" defaultValue=\"11\" min=\"1\" max=\"21\" />\n                    High\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Performance</td>\n                  <td>How successful do you think you were in accomplishing the goals of the task set by the experimenter? How satisfied were you with your performance in accomplishing these goals?</td>\n                  <td>\n                    <div className=\"tlx-scale\">\n                    Low\n                    <Input type=\"range\" name=\"performance\" defaultValue=\"11\" min=\"1\" max=\"21\" />\n                    High\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Effort</td>\n                  <td>How hard did you have to work (mentally and physically) to accomplish your level of performance?</td>\n                  <td>\n                    <div className=\"tlx-scale\">\n                    Low\n                    <Input type=\"range\" name=\"effort\" defaultValue=\"11\" min=\"1\" max=\"21\" />\n                    High\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Frustration</td>\n                  <td>How insecure, discouraged, irritated, stressed, and annoyed versus secure, gratified, content, relaxed and complacent did you feel during the task?</td>\n                  <td>\n                    <div className=\"tlx-scale\">\n                    Low\n                    <Input type=\"range\" name=\"frustration\" defaultValue=\"11\" min=\"1\" max=\"21\" />\n                    High\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row><Button type=\"submit\">Submit</Button></Row>\n      </Form></Container>\n    );\n  }\n\n  elabSurvey() {\n    return(\n      <Container>\n      <h4>Instructions:</h4>\n      <p>Evaluate your experience during the relevancy rating task you just completed by clicking at the point that matches your experience for each scale. Consider each scale indivdually.</p>\n      <hr />\n      <Form className=\"elab-div\" onSubmit={this.elabSubmit}>\n        <div className=\"elab-row\" id=\"e_q1\">\n          I had few thoughts in response\n          <Input type=\"range\" id=\"e_q1\" defaultValue=\"3\" min=\"1\" max=\"5\" />\n          I had many thoughts in response\n        </div>\n        <div className=\"elab-row\" id=\"e_q2\">\n          The answers had one meaning\n          <Input type=\"range\" id=\"e_q2\" defaultValue=\"3\" min=\"1\" max=\"5\" />\n          The answers had multiple meanings\n        </div>\n        <div className=\"elab-row\" id=\"e_q3\">\n          The answers had simple meaning\n          <Input type=\"range\" id=\"e_q3\" defaultValue=\"3\" min=\"1\" max=\"5\" />\n          The answers had rich, complex meaning\n        </div>\n        <Label>As I rated, I thought about how to answer related to me and my family</Label>\n        <div className=\"elab-row\" id=\"e_q4\">\n          Strongly disagree\n          <Input type=\"range\" id=\"e_q4\" defaultValue=\"3\" min=\"1\" max=\"5\" />\n          strongly agree\n        </div>\n        <Label>As I rated, I thought about how to answer related to other things that I know</Label>\n        <div className=\"elab-row\" id=\"e_q5\">\n          Strongly disagree\n          <Input type=\"range\" id=\"e_q5\" defaultValue=\"3\" min=\"1\" max=\"5\" />\n          strongly agree\n        </div>\n        <Label>As I rated, I thought about how to answer related to other people</Label>\n        <div className=\"elab-row\" id=\"e_q6\">\n          Strongly disagree\n          <Input type=\"range\" id=\"e_q6\" defaultValue=\"3\" min=\"1\" max=\"5\" />\n          strongly agree\n        </div>\n        <Label>As I rated, I thought about how to answer over and over again</Label>\n        <div className=\"elab-row\" id=\"e_q7\">\n          Strongly disagree\n          <Input type=\"range\" id=\"e_q7\" defaultValue=\"3\" min=\"1\" max=\"5\" />\n          strongly agree\n        </div>\n        <Label>As I rated, I thought about what should be done</Label>\n        <div className=\"elab-row\" id=\"e_q8\">\n          Strongly disagree\n          <Input type=\"range\" id=\"e_q8\" defaultValue=\"3\" min=\"1\" max=\"5\" />\n          strongly agree\n        </div>\n        <Label>Rate your level of understanding of how machine learning classification algorithms are trained</Label>\n        <div className=\"elab-row\" id=\"e_q9\">\n          Novice\n          <Input type=\"range\" id=\"e_q9\" defaultValue=\"4\" min=\"1\" max=\"7\" />\n          expert\n        </div>\n        <Label>Rate the *overall* accuracy of the machine estimation of the rating compared to your final rating</Label>\n        <div className=\"elab-row\" id=\"e_q10\">\n          Not very accurate\n          <Input type=\"range\" id=\"e_q10\" defaultValue=\"4\" min=\"1\" max=\"7\" />\n          very accurate\n        </div>\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n      </Container>\n    )\n  }\n\n  runSurveys() {\n    const { tlxComplete, elabComplete } = this.props;\n\n    if (!tlxComplete) {\n      return this.tlxScales();\n    }\n    if (!elabComplete) {\n      return this.elabSurvey();\n    }\n\n    // if (tlxComplete && elabComplete) {\n    //   return this.props.onComplete();\n    // }\n\n    return null;\n  }\n\n  componentWillUnmount() {\n    console.log(\"surveys unmounted\");\n  }\n\n  render() {\n    return (\n      <div className=\"surveys-body\">\n        {this.runSurveys()}\n      </div>\n    );\n  }\n}\n\n// function TLXscale(props) {\n//   return (\n//     <div className=\"tlx-scale\">\n//       {props.id==='performance' ? 'Good' : 'Low'}\n//       <Input type=\"range\" ref={props.ref} name={props.id} defaultValue=\"11\" min=\"1\" max=\"21\" />\n//       {props.id==='performance' ? 'Bad' : 'High'}\n//     </div>\n//   );\n// }\n\nexport default Surveys;\n","import React, { Component } from 'react';\nimport Modal from 'react-modal'; //http://reactcommunity.org/react-modal/\nimport { Container, Row, Col, Button } from 'reactstrap'; //\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\nimport './App.css';\nimport Questions from './Containers/Questions';\nimport Surveys from './Containers/Surveys';\n\nModal.setAppElement('#root');\n\nconst SPREADSHEET_ID = process.env.REACT_APP_SPREADSHEET_ID;\nconst SHEET_ID = process.env.REACT_APP_SHEET_ID;\nconst RESULTS_ID = process.env.REACT_APP_RESULTS_ID;\nconst TLX_ID = process.env.REACT_APP_TLX_ID;\nconst ELAB_ID = process.env.REACT_APP_ELAB_ID;\nconst CLIENT_EMAIL = process.env.REACT_APP_GOOGLE_CLIENT_EMAIL;\nconst PRIVATE_KEY = process.env.REACT_APP_GOOGLE_SERVICE_PRIVATE_KEY;\n\nconst spreadsheet = new GoogleSpreadsheet(SPREADSHEET_ID);\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      uID: 0,\n      workerID: 0,\n      completeCode: 0,\n      toolOn: true, //True if in codebook on condition, False if in control\n      consentSigned: false,\n      questionsComplete: false,\n      tlxComplete: false,\n      elabComplete: false,\n      surveysComplete: false,\n      ratingsValues: {},\n      tlxResults: {},\n      elabResults:{},\n    };\n\n    this.finishExperiment = this.finishExperiment.bind(this);\n  }\n\n  componentDidMount() {\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let foo = params.get('workerID');\n    console.log(foo);\n    if (foo) {\n      this.setState({\n        workerID: foo,\n      });\n    }\n    this.runExperiment();\n  }\n\n  componentDidUpdate() {\n    window.scrollTo(0, 0)\n    if (this.state.tlxComplete && this.state.elabComplete && this.state.completeCode === 0) {\n      this.finishExperiment();\n    }\n  }\n\n  appendSpreadsheet = async (sheet0row, resultsrow, tlxrow, elabrow) => {\n    try {\n      await spreadsheet.useServiceAccountAuth({\n        client_email: CLIENT_EMAIL,\n        private_key: PRIVATE_KEY,\n      });\n      // loads document properties and worksheets\n      await spreadsheet.loadInfo();\n\n      const sheet0 = spreadsheet.sheetsById[SHEET_ID];\n      const sheetResults = spreadsheet.sheetsById[RESULTS_ID];\n      const sheetTlx = spreadsheet.sheetsById[TLX_ID];\n      const sheetElab = spreadsheet.sheetsById[ELAB_ID];\n      const result = await sheet0.addRow(sheet0row);\n      const result2 = await sheetResults.addRow(resultsrow);\n      const result3 = await sheetTlx.addRow(tlxrow);\n      const result4 = await sheetElab.addRow(elabrow);\n    } catch (e) {\n      console.error('Error: ', e);\n    }\n  };\n\n  runExperiment() {\n    //Calc u_id\n    const uID = Math.floor((Math.random() * 999999) + 10000);\n\n    //Calc condition\n\n    this.setState({\n      uID: uID,\n    });\n  }\n\n  signConsent() {\n    this.setState({\n      consentSigned: true\n    });\n  }\n\n  onRatingComplete  = ratingsValues => {\n    this.setState(\n      {\n        ratingsValues: ratingsValues,\n        questionsComplete: true\n      },\n      () => { console.log(this.state.ratingsValues); }\n    );\n  }\n\n  onTLXSubmit = (tlxValues) => {\n    this.setState({\n      tlxResults: tlxValues,\n      tlxComplete: true,\n    });\n  }\n\n  onElabSubmit = (elabValues) => {\n    this.setState({\n      elabResults: elabValues,\n      elabComplete: true,\n    });\n  }\n\n  finishExperiment() {\n    //e.preventDefault();\n\n    const {workerID, uID, toolOn, consentSigned, ratingsValues, tlxResults, elabResults} = this.state;\n\n    //generate completion code\n    const code = Math.floor((Math.random() * 99999) + 10000);\n\n    //append data\n    //sheet 0 {Worker_ID\tu_ID\tconsent_signed\tgenerated_code\tpaid}\n    //sheet 1002124199 {u_ID\tcondition\tDoc1\tDoc2\tDoc3\tDoc4\tDoc5\tDoc6\tDoc7\tDoc8\tDoc9\tDoc10}\n    //sheet 463326366 {u_ID\ttlx1\ttlx2\ttlx3\ttlx4\ttlx5\ttlx6}\n    //sheet 1139674776 {u_ID\telab1\telab2\telab3\telab4\telab5\telab6\telab7\telab8}\n\n    const sheet0row = {Worker_ID: workerID,\tu_ID: uID,\tconsent_signed: consentSigned,\tgenerated_code: code};\n    const resultsRow = {u_ID: uID,\tcondition: toolOn,\t...ratingsValues};\n    console.log(resultsRow);\n    const tlxRow = {u_ID: uID,\t...tlxResults};\n    const elabRow = {u_ID: uID,\t...elabResults};\n\n    //this.appendSpreadsheet(SHEET_ID, sheet0row);\n    this.appendSpreadsheet(sheet0row, resultsRow, tlxRow, elabRow);\n\n    this.setState({\n      surveysComplete: true,\n      completeCode: code,\n    });\n  }\n\n  render() {\n    const { consentSigned, questionsComplete, surveysComplete } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Modal\n          isOpen={!consentSigned}\n          onRequestClose={this.signConsent}\n          contentLabel=\"Consent Form\"\n          shouldCloseOnOverlayClick={false}\n        >\n          <div>\n          <p>You are being asked to complete a study for research purposes. The study is testing how data collection is affected by the use of additional tooling to assist workers. Completing this study is voluntary and you can stop at any time by closing this window.</p>\n          <p>You must be 18 years of age or older to participate in this study.</p>\n          <p>There are minimal risks associated with your participation in this study. You will receive $5 for completing this study. In order to receive full compensation for completing the study, you must complete all parts of the study and pass all attention checks, then enter the provided random number code into the MTurk HIT window.</p>\n          <p>Please note that because you are participating in this research via MTurk, your participation will be listed on your MTurk profile. However, MTurk will not have access to your responses on the survey. Further, while we will have access to your MTurk ID, we will only use this information to pay you and then your ID will be deleted from our records and will no longer be associated with your responses.</p>\n          <p>If you have any questions about the study itself, how it is implemented, or study compensation, please contact J Christensen at jtchrist@ncsu.edu or B Watson at bwatson@ncsu.edu . Please reference study number 16906 when contacting anyone about this project.</p>\n          <p>If you have questions about your rights as a participant or are concerned with your treatment throughout the research process, please contact the NC State University IRB Director at IRB-Director@ncsu.edu, 919-515-8754, or fill out this confidential form online.</p>\n          <p>If you consent to complete this survey, please click the \"Yes I consent\" button to continue.</p>\n          </div>\n          <Button onClick={() => this.signConsent()}>Yes, I consent</Button>\n        </Modal>\n        {/* <header>\n          Header Text\n        </header> */}\n        <Container className=\"App-body\">\n          <Row>\n            <Col className=\"p-4 col-sm-12 col-md-6 offset-md-3\">\n              <Questions\n                onRatingComplete={this.onRatingComplete}\n                toolOn={this.state.toolOn}\n              />\n            </Col>\n          </Row>\n        </Container>\n        <Modal\n          isOpen={questionsComplete && !surveysComplete}\n          contentLabel=\"Surveys\"\n          shouldCloseOnOverlayClick={false}\n        >\n          <Surveys\n            onTLXSubmit={this.onTLXSubmit}\n            onElabSubmit={this.onElabSubmit}\n            tlxComplete={this.state.tlxComplete}\n            elabComplete={this.state.elabComplete}\n          />\n        </Modal>\n        <Modal\n          isOpen={questionsComplete && surveysComplete}\n          contentLabel=\"CompletionCode\"\n          shouldCloseOnOverlayClick={false}\n        >\n          <div>\n          <p>Thank you for participating! Your completion code is:</p>\n          <p><b>{this.state.completeCode}</b></p>\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}